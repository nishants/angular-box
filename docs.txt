arch : 
 AppController : 
 - parent of each scope in the app
 - place to put int app logic like login, splash-screen, navigation, loading static data

application-scope : 
 - holds data shared across the elements, 
 - better alternative : use a service/ say appService instead of app-scope. (allows encapsulating the data)

On landing : 
- index page launched, with app controller.
- app controller shows splash-screen(say loader), while it loads the static data
- then it puts the static data on "appplication-scope"
- now static data is avialable to all the controllers/views through their own scope.

- Layers
 - html       : ui-structure and elements
 - css        : ui-styling,layout
 - directives : create/modify ui elements and element behaviours
                i.e. act on page scroll, create new widget

 - controller : interface between app and user interface
 - models     : relationships/encapsulation of data.

 - services   : business logic on aggregation, resolution/filtering/transformation of data
 - data       : abstracts data source (local storage, http, cookies etc)

Issues: 
- angularjs bad error message
- routing errors/ injection errors etc, are not descriptive
- solutions : 
    - remember error messages 
    - look up on google
    - make architecture more suitable for it

optimizations :
- $httpProvider.useApplyAsync(true) :
   - wait for approx 10ms before applying next digest cycle.
   - saves digest cycles per request
   read more : https://docs.angularjs.org/api/ng/provider/$httpProvider


Tweaks :
 - break index.html for js dependencies - resuse in specrunner


Testing :
- angular directives with jasmine


- add chrome plugin to display console errors : "JavaScript Errors Notifier"

errors
-jasmine didn't discover angular module : angularmock not working
